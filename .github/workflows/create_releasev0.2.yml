name: Create Release Branch

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Git user info
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic-release
        with:
          dry_run: true
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main',
              'dev',
              {
                name: 'beta',
                prerelease: true
              },
              {
                name: 'alpha',
                prerelease: true
              }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


      - name: debug
        run: |
          echo "Semantic Release Output:"
          echo "${{ steps.semantic-release.outputs.release_notes }}"
          echo "${{ steps.semantic-release.outputs.new_release_version }}"

      # - name: Update package.json with new version
      #   run: |
      #     if [ -z "${{ env.NEW_VERSION }}" ]; then
      #       echo "No new version detected. Skipping package.json update."
      #       exit 0
      #     fi
      #     jq --arg version "$env.NEW_VERSION" '.version = $version' package.json > package.json.tmp
      #     mv package.json.tmp package.json
      #     git add package.json
      #     git commit -m "chore: update version to ${{ env.NEW_VERSION }}"

      # - name: Update CHANGELOG.md
      #   run: |
      #     if [ -z "${{ env.CHANGES }}" ]; then
      #       echo "No new changelog detected. Skipping CHANGELOG.md update."
      #       exit 0
      #     fi
      #     echo "${{ env.CHANGES }}" >> CHANGELOG.md
      #     git add CHANGELOG.md
      #     git commit -m "chore: update changelog for ${{ env.NEW_VERSION }}"

      # - name: Create and push new release branch
      #   run: |
      #     git checkout -b release/${{ env.NEW_VERSION }}
      #     git push origin release/${{ env.NEW_VERSION }}
 
      - name: Create new tag
        run: |
          if git rev-parse "refs/tags/${{ env.NEW_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.NEW_VERSION }} already exists. Skipping creation."
          else
            git tag -a ${{ env.NEW_VERSION }} -m "Release ${{ env.NEW_VERSION }}"
            git push origin ${{ env.NEW_VERSION }}
          fi

      # - name: Open pull request to master
      #   uses: devops-infra/action-pull-request@v0.5.5
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     title: "Release ${{ env.NEW_VERSION }}"
      #     body: |
      #       Hi!
      #       This PR is for a new release ${{ env.NEW_VERSION }} to be merged with master.
      #     source_branch: release/${{ env.NEW_VERSION }}
      #     target_branch: master
      #     assignee: hashemuhammed
      #     reviewer: hashemuhammed
      #     label: release

      # - name: Open pull request to dev
      #   uses: devops-infra/action-pull-request@v0.5.5
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     title: "Changelog ${{ env.NEW_VERSION }}"
      #     body: |
      #       Hi!
      #       This PR is for updating changelog for release ${{ env.NEW_VERSION }} to be merged with dev.
      #     source_branch: release/${{ env.NEW_VERSION }}
      #     target_branch: dev
      #     assignee: hashemuhammed 
      #     reviewer: hashemuhammed 
      #     label: release
